@page "/interval-ping"
@using System.Diagnostics
@inject IJSRuntime Js;

<h1>Interval Timer</h1>

<Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="Start"> START </Button>
@* <button class="btn btn-primary" @onclick="Start">START</button> *@
<p>
    <label>
        START STAGE:
        <input @bind="startStage"/>
    </label>
</p>

<p>Current Stage @CurrentStage?.Id</p>
<p>Current Stage Runs @CurrentStage?.Runs</p>
<p>Current Run @CurrentRun</p>
<p>Current Run Move @CurrentRunMove</p>
<p>Current Run Time @CurrentRunTime</p>

<h1 class="display-3">@counter.ToString("F2") seconds</h1>
@* <Progress Class="mb-3"> *@
@*     <ProgressBar @ref="progressBar" Width="@ProgressBarWidth" /> *@
@* </Progress> *@
<audio id="player">
    <source id="playerSource" src=""/>
</audio>
@if (Pause)
{
    <h1>PAUSE</h1>
}
@if (CurrentStage != null)
{
    @foreach (var timing in @CurrentStage.RunMoveTimings)
    {
        <p>@timing.Key   @timing.Value.ToString("F2")</p>
    }
}

@code
{
    
    ProgressBar progressBar = default!;

    private void IncreaseProgressBar()
    {
        progressBar.IncreaseWidth(10);
        
        //progressBar.SetLabel($"{progressBar.GetWidth()}%");
    }
    private static System.Timers.Timer aTimer;
    private float counter = 0;
    private float elapsed = 0;

    public double ProgressBarWidth
    {
        get
        {
            if (Pause)
            {
                elapsed = 10 - counter;
            }
            else
            {
                elapsed = CurrentRunTime - counter;
            }

            Console.WriteLine(elapsed / CurrentRunTime * 100);
            return elapsed / CurrentRunTime * 100;
        }
    }

    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(10);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
        counter -= 0.01f;
    }
    
    private int startStage;
    [Parameter] public Stage CurrentStage { get; set; }
    [Parameter]  public  int CurrentRun { get; set; }
    [Parameter]  public  int CurrentRunMove { get; set; }
    [Parameter]  public  float CurrentRunTime { get; set; }
    [Parameter]  public  bool Pause { get; set; }
    
    private CancellationTokenSource _cts;
    
    void Start()
    {
        if(_cts!=null)
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        Task.Factory.StartNew(StartAsync, _cts.Token);
    }
    void Stop()
    {
        _cts.Cancel();
    }
   async void StartAsync()
   {
        var stages = GenerateStages();
      
        // between every run 10 sec on pause 
        // every stage 30 sec pause
        var runPause = TimeSpan.FromSeconds(10);
        var stagePause = TimeSpan.FromSeconds(30);
        
        var stagesToRun = stages.Skip(startStage - 1).ToList();
        
        StartTimer();
        PlayAudioFileRunStart();
        foreach (var stage in stagesToRun)
        {
            CurrentStage = stage;
            for (int i = 0; i < stage.Runs; i++)
            {
                CurrentRun = i + 1;
                foreach (var runMoveTiming in stage.RunMoveTimings)
                {
                    counter = runMoveTiming.Value;
                    CurrentRunMove = runMoveTiming.Key;
                    CurrentRunTime = runMoveTiming.Value;
                    
                    await Task.Delay(TimeSpan.FromSeconds(runMoveTiming.Value));
                    PlayAudioFileRunMove();
                }

                Pause = true;
                counter = 10f;
                await Task.Delay(runPause);
                PlayAudioFileRunStart();
                Pause = false;
            }
            Pause = true;
            counter = 30f;
            await Task.Delay(stagePause);
            PlayAudioFileRunStart();
            Pause = false;
        }
    }

   private static List<Stage> GenerateStages()
   {
       var timings1 = new List<float> { 2.37f, 2.07f, 1.83f, 1.65f, 1.49f, 1.36f, 1.26f, 1.17f, 1.09f, 1.02f, 0.96f, 0.90f, 0.85f, 0.81f, 0.77f };
       var timings3 = new List<float> { 1.86f, 1.63f, 1.44f, 1.29f, 1.17f, 1.07f, 0.99f, 0.92f, 0.85f, 0.80f, 0.75f, 0.71f, 0.67f, 0.63f, 0.60f };
       var timings5 = new List<float> { 4.15f, 3.63f, 3.20f, 2.88f, 2.61f, 2.38f, 2.21f, 2.04f, 1.90f, 1.78f, 1.67f, 1.58f, 1.49f, 1.41f, 1.35f };
       var stages = new List<Stage>();
       // 1 2 11 12 - 1
       // 4 3 9 10  - 3
       // 5 6 7 8 - 5        
       for (int i = 0; i < 15; i++)
       {
           int runs = 5;

           switch (i + 1)
           {
               case <= 2:
                   runs = 5;
                   break;
               case <= 5:
                   runs = 6;
                   break;
               case <= 8:
                   runs = 7;
                   break;
               case <= 11:
                   runs = 8;
                   break;
               case <= 14:
                   runs = 9;
                   break;
               case <= 17:
                   runs = 10;
                   break;
           }

           var stage = new Stage()
           {
               Id = i + 1,Runs = runs, RunMoveTimings = new Dictionary<int, float>()
               {
                   { 1, timings1[i] },
                   { 2, timings1[i] },
                   { 3, timings3[i] },
                   { 4, timings3[i] },
                   { 5, timings5[i] },
                   { 6, timings5[i] },
                   { 7, timings5[i] },
                   { 8, timings5[i] },
                   { 9, timings3[i] },
                   { 10, timings3[i] },
                   { 11, timings1[i] },
                   { 12, timings1[i] }
               }
           };
           stages.Add(stage);
       }

       return stages;
   }

   public class Stage
    {
        public int Id { get; set; }
        public int Runs { get; set; }
        public Dictionary<int, float> RunMoveTimings { get; set; }
    }

    async Task PlayAudioFileRunMove()
    {
        await Js.InvokeVoidAsync("PlayAudioFile", "/sounds/beep1.wav");
    }
    async Task PlayAudioFileRunStart()
    {
        await Js.InvokeVoidAsync("PlayAudioFile", "/sounds/countdown-start.wav");
    }
}